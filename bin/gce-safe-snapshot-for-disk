#!/bin/bash

################################################################################
# This script is freely inspired by this great article by F. Voznika: [1].
# It tries to take a snapshot from a live VM by stopping the services that most
# likely impact its disk usage. Please remember that a safe bit-a-bit copy of a
# disk is guaranteed only on an unattached sik (or disk attached to a VM which
# is not in state RUNNING).
# To give you full control, it just outputs qwhat it would do, so you can cut/paste
# and maybe add additional scripts to the naive "service start/stop" provided here.
#
# *** ACHTUNG ***
# THIS SCRIPT IS PROVIDED AS IS. USE AT YOUR OWN RISK.
# (However, this tries its best to get your Snapshot data from a live vm)
#
# [1] http://googlecloudplatform.blogspot.ch/2013/10/persistent-disk-backups-using-snapshots.html
################################################################################
# Author: Riccardo Carlesso <palladiusbonton+sakura@gmail.com>
# Contributors:
# - Francisco Voznika
# - Andy Wua
################################################################################

VERSION=0.3

set -e

_usage() {
  echo "Usage: `basename $0` [-s <COMMA_SEPARATED_SERVICES> ] <disk-name> <disk-path> [snapshot-name]"
  echo "  eg:  `basename $0` -s mysqld,apache2 my-disk /mnt/my-disk"
  echo "Error: $1"
}
service_stop() {
  echo sudo service stop $*
}
service_start() {
  echo sudo service start $*
}


SERVICES=""

while getopts "hs:" opt; do
  case $opt in
    h) 
      _usage "Help option called"
      shift;;
    s) 
      SERVICES="$OPTARG"; 
      shift 2;; 
    \?) echo "Invalid option: -"$OPTARG"" >&2
      exit 1;;
    : ) echo "Option -"$OPTARG" requires an argument." >&2
      exit 1;;
  esac
done

################################################################################
# Main function
################################################################################
# ARG1: disk          (mandatory)
# ARG2: DISK_PATH     (mandatory)
# ARG3: SNPASHOT_NAME (optional)
MIN_ARGS=2
MAX_ARGS=3
if [ $# -lt $MIN_ARGS -o $# -gt $MAX_ARGS ]; then
  _usage "ARGS=$# (not in $MIN_ARGS..$MAX_ARGS)"
  exit 11
fi

DISK="$1"
DISK_PATH="${2:-/mnt/$DISKNAME}"
SNAPSHOT_NAME="${3:-$DISK-SNAPSHOT}"

# MAIN
echo "#!/bin/bash"
echo
echo "# The following script takes a snapshot of disk '$DISK' (in '$DISK_PATH')"
echo "# preventively stopping '$SERVICES' which potentially affect that disk"
echo "# and creates a snapshot called '$SNAPSHOT_NAME'. Feel free to copy this"
echo "# output to a file and edit according to your needs."
echo

# die at first error
echo set -e
echo set -x
echo "$SERVICES" | sed -e "s/,/\n/g" | while read S ; do
  service_stop $S
done
echo sudo sync
echo "trap 'sudo fsfreeze -f $DISK_PATH' 0 # guarantees this will be executed anyway.."
echo sudo fsfreeze -f $DISK_PATH
echo gcutil addsnapshot --source_disk=my-disk $SNAPSHOT_NAME --nosynchronous_mode

echo "while gcutil getsnapshot '$SNAPSHOT_NAME' | grep 'status' | egrep -v 'UPLOADING|READY' ; do"
echo "  echo 'Waiting for Snapshot to be uploading or finished.'"
echo "  sleep 0.5"
echo "done"
echo "# Snapshot '$SNAPSHOT_NAME' appears to have been created"

echo sudo fsfreeze -u $DISK_PATH
echo "$SERVICES" | sed -e "s/,/\n/g" | while read S ; do
  service_start $S
done
echo echo Done.

